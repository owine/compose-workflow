name: Lint Docker Compose

on:
  workflow_call:
    inputs:
      stacks:
        description: "JSON array of stack names to lint"
        required: true
        type: string
      webhook-url:
        description: "1Password reference to Discord webhook URL"
        required: true
        type: string
      repo-name:
        description: "Repository display name for notifications"
        required: true
        type: string
      target-repository:
        description: "Target repository to checkout (owner/repo-name)"
        required: true
        type: string
      target-ref:
        description: "Git reference to checkout from target repository"
        required: false
        type: string
        default: 'main'
      github-event-before:
        description: "GitHub event before SHA (github.event.before)"
        required: false
        type: string
        default: ''
      github-event-base:
        description: "GitHub event base SHA (github.event.base)"
        required: false
        type: string
        default: ''
      github-pull-base-sha:
        description: "GitHub pull request base SHA (github.event.pull_request.base.sha)"
        required: false
        type: string
        default: ''
      github-default-branch:
        description: "GitHub repository default branch (github.event.repository.default_branch)"
        required: false
        type: string
        default: 'main'
      event-name:
        description: "GitHub event name (github.event_name)"
        required: false
        type: string
        default: 'push'

jobs:
  scanning:
    name: GitGuardian scan
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    if: ${{ inputs.event-name == 'push' }}
    steps:
      - name: Checkout target repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          repository: ${{ inputs.target-repository }}
          ref: ${{ inputs.target-ref }}
          fetch-depth: 0  # fetch all history so multiple commits can be scanned

      - name: Configure 1Password Service Account
        uses: 1password/load-secrets-action/configure@13f58eec611f8e5db52ec16247f58c508398f3e6  # v3.0.0
        with:
          service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: Load GitGuardian credentials
        id: op-load-secret
        uses: 1password/load-secrets-action@13f58eec611f8e5db52ec16247f58c508398f3e6  # v3.0.0
        with:
          unset-previous: true
        env:
          GITGUARDIAN_API_KEY: "op://Docker/gitguardian/api_key"

      - name: GitGuardian scan
        run: |
          echo ""
          echo "🔒 Starting GitGuardian security scanning..."
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""

      - name: Run GitGuardian scan
        uses: GitGuardian/ggshield-action@0935c02957f6fd78bc52166570e4e345c539120f # v1.43.0
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ inputs.github-event-before }}
          GITHUB_PUSH_BASE_SHA: ${{ inputs.github-event-base }}
          GITHUB_PULL_BASE_SHA: ${{ inputs.github-pull-base-sha }}
          GITHUB_DEFAULT_BRANCH: ${{ inputs.github-default-branch }}
          GITGUARDIAN_API_KEY: ${{ steps.op-load-secret.outputs.GITGUARDIAN_API_KEY }}

      - name: GitGuardian scan complete
        if: always()
        run: |
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "🎉 GITGUARDIAN SECURITY SCAN: PASSED"
            echo "   No secrets or security policy violations detected"
          else
            echo "💥 GITGUARDIAN SECURITY SCAN: FAILED"
            echo "   Security issues detected - review output above for details"
            echo "   Common issues: hardcoded secrets, API keys, passwords in code"
          fi
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Unload GitGuardian credentials
        uses: 1password/load-secrets-action@13f58eec611f8e5db52ec16247f58c508398f3e6  # v3.0.0
        with:
          unset-previous: true

  lint:
    strategy:
      matrix:
        stack: ${{ fromJson(inputs.stacks) }}
      fail-fast: false
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    steps:
      - name: Checkout target repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          repository: ${{ inputs.target-repository }}
          ref: ${{ inputs.target-ref }}

      - name: Run parallel linting
        run: |
          # Create temporary files for capturing output
          YAML_OUTPUT=$(mktemp)
          DOCKER_OUTPUT=$(mktemp)

          echo "🔍 Starting validation for stack: ${{ matrix.stack }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""

          # Run YAML and Docker Compose linting in parallel with output capture
          (yamllint --strict --config-file .yamllint ./${{ matrix.stack }}/compose.yaml 2>&1 | tee "$YAML_OUTPUT") &
          YAML_PID=$!

          (docker compose -f ./${{ matrix.stack }}/compose.yaml config 2>&1 | tee "$DOCKER_OUTPUT") &
          DOCKER_PID=$!

          # Wait for both processes and capture exit codes
          wait $YAML_PID
          YAML_EXIT=$?

          wait $DOCKER_PID
          DOCKER_EXIT=$?

          echo ""
          echo "📋 VALIDATION RESULTS SUMMARY"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          # Report YAML linting results
          echo ""
          echo "📝 YAML LINTING (yamllint)"
          echo "───────────────────────────────────────────────────────────────────────────────────"
          if [ $YAML_EXIT -eq 0 ]; then
            echo "✅ PASSED - YAML syntax and formatting is valid"
          else
            echo "❌ FAILED - YAML validation errors detected:"
            echo ""
            cat "$YAML_OUTPUT" | sed 's/^/    /'
          fi

          echo ""

          # Report Docker Compose validation results
          echo "🐳 DOCKER COMPOSE VALIDATION (docker compose config)"
          echo "───────────────────────────────────────────────────────────────────────────────────"
          if [ $DOCKER_EXIT -eq 0 ]; then
            echo "✅ PASSED - Docker Compose configuration is valid"
          else
            echo "❌ FAILED - Docker Compose configuration errors detected:"
            echo ""
            cat "$DOCKER_OUTPUT" | sed 's/^/    /'
          fi

          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          # Final status summary
          if [ $YAML_EXIT -eq 0 ] && [ $DOCKER_EXIT -eq 0 ]; then
            echo "🎉 OVERALL STATUS: ALL VALIDATION CHECKS PASSED"
            echo "   Stack '${{ matrix.stack }}' is ready for deployment"
          else
            echo "💥 OVERALL STATUS: VALIDATION FAILED"
            echo "   Stack '${{ matrix.stack }}' has configuration issues that must be resolved"
            echo ""
            echo "   Failed checks:"
            [ $YAML_EXIT -ne 0 ] && echo "   • YAML linting (yamllint)"
            [ $DOCKER_EXIT -ne 0 ] && echo "   • Docker Compose validation (docker compose config)"
          fi

          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          # Cleanup temporary files
          rm -f "$YAML_OUTPUT" "$DOCKER_OUTPUT"

          # Exit with error if any linting failed
          if [ $YAML_EXIT -ne 0 ] || [ $DOCKER_EXIT -ne 0 ]; then
            exit 1
          fi

      - name: Report lint status
        if: always()
        run: |
          echo "::group::📊 Final Status for Stack: ${{ matrix.stack }}"
          echo ""
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "🎉 STACK VALIDATION: PASSED"
            echo "   Stack '${{ matrix.stack }}' passed all validation checks"
            echo "   ✅ YAML linting (yamllint)"
            echo "   ✅ Docker Compose validation (docker compose config)"
          else
            echo "💥 STACK VALIDATION: FAILED"
            echo "   Stack '${{ matrix.stack }}' has validation issues"
            echo "   See detailed error output above for resolution steps"
          fi
          echo ""
          echo "::endgroup::"


  lint-summary:
    name: Lint Summary
    runs-on: ubuntu-24.04
    needs: [scanning, lint]
    if: always()
    steps:
      - name: Check results
        run: |
          echo ""
          echo "🔍 OVERALL VALIDATION SUMMARY"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""

          # GitGuardian Scanning Results
          echo "🔒 GITGUARDIAN SECURITY SCANNING"
          echo "───────────────────────────────────────────────────────────────────────────────────"
          case "${{ needs.scanning.result }}" in
            "success")
              echo "✅ PASSED - No secrets detected in code changes"
              SCANNING_OK=true
              ;;
            "skipped")
              echo "⏭️  SKIPPED - Security scanning only runs on push events"
              SCANNING_OK=true
              ;;
            "failure")
              echo "❌ FAILED - Security issues detected (secrets or policy violations)"
              SCANNING_OK=false
              ;;
            *)
              echo "❓ UNKNOWN - Unexpected scanning result: ${{ needs.scanning.result }}"
              SCANNING_OK=false
              ;;
          esac

          echo ""

          # Lint Results
          echo "📋 CODE QUALITY VALIDATION"
          echo "───────────────────────────────────────────────────────────────────────────────────"
          case "${{ needs.lint.result }}" in
            "success")
              echo "✅ PASSED - All YAML and Docker Compose validations successful"
              echo "   • YAML syntax and formatting: Valid"
              echo "   • Docker Compose configuration: Valid"
              LINT_OK=true
              ;;
            "failure")
              echo "❌ FAILED - One or more validation checks failed"
              echo "   • Check individual stack results above for specific error details"
              echo "   • Common issues: YAML syntax errors, Docker Compose configuration problems"
              LINT_OK=false
              ;;
            *)
              echo "❓ UNKNOWN - Unexpected lint result: ${{ needs.lint.result }}"
              LINT_OK=false
              ;;
          esac

          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          # Final determination
          if [[ "$SCANNING_OK" == "true" && "$LINT_OK" == "true" ]]; then
            echo "🎉 FINAL STATUS: ALL VALIDATION CHECKS PASSED"
            echo "   Repository is ready for deployment"
            exit 0
          else
            echo "💥 FINAL STATUS: VALIDATION FAILED"
            echo "   Issues must be resolved before deployment"
            echo ""
            echo "   Failed components:"
            [[ "$SCANNING_OK" != "true" ]] && echo "   • Security scanning (GitGuardian)"
            [[ "$LINT_OK" != "true" ]] && echo "   • Code quality validation (YAML/Docker Compose)"
            exit 1
          fi

  notify:
    name: Discord Notification
    runs-on: ubuntu-24.04
    needs: [scanning, lint, lint-summary]
    if: always()
    steps:
      - name: Configure 1Password Service Account
        uses: 1password/load-secrets-action/configure@13f58eec611f8e5db52ec16247f58c508398f3e6  # v3.0.0
        with:
          service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: Load Discord webhook
        id: op-load-discord
        uses: 1password/load-secrets-action@13f58eec611f8e5db52ec16247f58c508398f3e6  # v3.0.0
        with:
          unset-previous: true
        env:
          DISCORD_WEBHOOK: ${{ inputs.webhook-url }}

      - name: Send Discord notification
        uses: sarisia/actions-status-discord@11a0bfe3b50977e38aa2bd4a4ebd296415e83c19  # v1.15.4
        if: ${{ needs.lint-summary.result == 'failure' || (needs.lint-summary.result == 'success' && github.event_name != 'pull_request') }}
        with:
          webhook: ${{ steps.op-load-discord.outputs.DISCORD_WEBHOOK }}
          status: ${{ needs.lint-summary.result == 'success' && 'success' || 'failure' }}
          title: "🔍 ${{ inputs.repo-name }} Validation"
          description: |
            ${{ needs.lint-summary.result == 'success' && '✅ **VALIDATION PASSED**' || '❌ **VALIDATION FAILED**' }}

            **Security:** GitGuardian ${{ needs.scanning.result == 'success' && '✅' || needs.scanning.result == 'skipped' && '⏭️' || '❌' }} **Quality:** Linting ${{ needs.lint.result == 'success' && '✅' || '❌' }}

            ${{ github.event_name == 'pull_request' && '🔀 **Pull Request**' || github.event_name == 'workflow_dispatch' && '🔧 **Manual Trigger**' || format('📝 **Push to {0}**', github.ref_name) }}
            **Stacks:** ${{ join(fromJson(inputs.stacks), ', ') }}
          color: ${{ needs.lint-summary.result == 'success' && 0x00ff00 || 0xff0000 }}
          username: "GitHub Actions"
          avatar_url: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"

      - name: Unload Discord webhook
        uses: 1password/load-secrets-action@13f58eec611f8e5db52ec16247f58c508398f3e6  # v3.0.0
        with:
          unset-previous: true
