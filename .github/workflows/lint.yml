name: Lint Docker Compose

on:
  workflow_call:
    inputs:
      stacks:
        description: "JSON array of stack names to lint"
        required: true
        type: string
      webhook-url:
        description: "1Password reference to Discord webhook URL"
        required: true
        type: string
      repo-name:
        description: "Repository display name for notifications"
        required: true
        type: string
      target-repository:
        description: "Target repository to checkout (owner/repo-name)"
        required: true
        type: string
      target-ref:
        description: "Git reference to checkout from target repository"
        required: false
        type: string
        default: 'main'
      github-event-before:
        description: "GitHub event before SHA (github.event.before)"
        required: false
        type: string
        default: ''
      github-event-base:
        description: "GitHub event base SHA (github.event.base)"
        required: false
        type: string
        default: ''
      github-pull-base-sha:
        description: "GitHub pull request base SHA (github.event.pull_request.base.sha)"
        required: false
        type: string
        default: ''
      github-default-branch:
        description: "GitHub repository default branch (github.event.repository.default_branch)"
        required: false
        type: string
        default: 'main'
      event-name:
        description: "GitHub event name (github.event_name)"
        required: false
        type: string
        default: 'push'
      discord-user-id:
        description: "Discord user ID to mention in failure notifications (e.g., '<@123456789>')"
        required: false
        type: string
        default: ''

jobs:
  scanning:
    name: GitGuardian scan
    runs-on: ubuntu-24.04
    timeout-minutes: 10
    if: ${{ inputs.event-name == 'push' }}
    steps:
      - name: Checkout target repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          repository: ${{ inputs.target-repository }}
          ref: ${{ inputs.target-ref }}
          fetch-depth: 0  # fetch all history so multiple commits can be scanned

      - name: Configure 1Password Service Account
        uses: 1password/load-secrets-action/configure@13f58eec611f8e5db52ec16247f58c508398f3e6  # v3.0.0
        with:
          service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: Load GitGuardian credentials
        id: op-load-secret
        uses: 1password/load-secrets-action@13f58eec611f8e5db52ec16247f58c508398f3e6  # v3.0.0
        with:
          unset-previous: true
        env:
          GITGUARDIAN_API_KEY: "op://Docker/gitguardian/api_key"

      - name: GitGuardian scan
        run: |
          echo ""
          echo "🔒 Starting GitGuardian security scanning..."
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""

      - name: Run GitGuardian scan
        uses: GitGuardian/ggshield-action@0c8a8c84deab9b7f727c0c294cf0c95b3644903f # v1.44.0
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ inputs.github-event-before }}
          GITHUB_PUSH_BASE_SHA: ${{ inputs.github-event-base }}
          GITHUB_PULL_BASE_SHA: ${{ inputs.github-pull-base-sha }}
          GITHUB_DEFAULT_BRANCH: ${{ inputs.github-default-branch }}
          GITGUARDIAN_API_KEY: ${{ steps.op-load-secret.outputs.GITGUARDIAN_API_KEY }}

      - name: GitGuardian scan complete
        if: always()
        run: |
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "🎉 GITGUARDIAN SECURITY SCAN: PASSED"
            echo "   No secrets or security policy violations detected"
          else
            echo "💥 GITGUARDIAN SECURITY SCAN: FAILED"
            echo "   Security issues detected - review output above for details"
            echo "   Common issues: hardcoded secrets, API keys, passwords in code"
          fi
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: Unload GitGuardian credentials
        uses: 1password/load-secrets-action@13f58eec611f8e5db52ec16247f58c508398f3e6  # v3.0.0
        with:
          unset-previous: true

  lint:
    strategy:
      matrix:
        stack: ${{ fromJson(inputs.stacks) }}
      fail-fast: false
    runs-on: ubuntu-24.04
    timeout-minutes: 5
    steps:
      - name: Checkout target repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          repository: ${{ inputs.target-repository }}
          ref: ${{ inputs.target-ref }}

      - name: Run parallel linting
        run: |
          # Set pipefail to capture exit codes correctly from pipelines
          set -o pipefail

          # Create temporary files for capturing output
          YAML_OUTPUT=$(mktemp)
          DOCKER_OUTPUT=$(mktemp)
          DOCKER_FILTERED=$(mktemp)

          echo "🔍 Starting validation for stack: ${{ matrix.stack }}"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📁 Stack: ${{ matrix.stack }}"
          echo "📄 File: ./${{ matrix.stack }}/compose.yaml"
          echo ""

          # Function to create temporary environment file with placeholder values
          create_temp_env() {
            local compose_file="$1"
            local temp_env_file="$2"

            # Extract environment variable references from compose file and create realistic placeholders
            grep -oE '\$\{[^}]+\}' "$compose_file" | sort -u | sed 's/\${//' | sed 's/}//' | while read var; do
              # Use realistic placeholder values based on common variable patterns
              case "$var" in
                *PATH*|*DIR*)
                  echo "${var}=/tmp/placeholder" >> "$temp_env_file"
                  ;;
                *DOMAIN*)
                  echo "${var}=example.com" >> "$temp_env_file"
                  ;;
                *PORT*)
                  echo "${var}=8080" >> "$temp_env_file"
                  ;;
                *KEY*|*SECRET*|*TOKEN*|*PASS*)
                  echo "${var}=placeholder-secret-value" >> "$temp_env_file"
                  ;;
                *URL*|*HOST*)
                  echo "${var}=http://localhost:8080" >> "$temp_env_file"
                  ;;
                UID|PUID)
                  echo "${var}=1000" >> "$temp_env_file"
                  ;;
                GID|PGID)
                  echo "${var}=1000" >> "$temp_env_file"
                  ;;
                TZ)
                  echo "${var}=UTC" >> "$temp_env_file"
                  ;;
                *)
                  echo "${var}=placeholder_value" >> "$temp_env_file"
                  ;;
              esac
            done 2>/dev/null || true
          }

          # Run YAML and Docker Compose linting in parallel with output capture
          (set -o pipefail; yamllint --strict --config-file .yamllint ./${{ matrix.stack }}/compose.yaml 2>&1 | tee "$YAML_OUTPUT") &
          YAML_PID=$!

          # Create temporary .env with placeholders to suppress environment variable warnings
          TEMP_ENV=$(mktemp)
          create_temp_env "./${{ matrix.stack }}/compose.yaml" "$TEMP_ENV"

          (set -o pipefail; docker compose --env-file "$TEMP_ENV" -f ./${{ matrix.stack }}/compose.yaml config 2>&1 | tee "$DOCKER_OUTPUT") &
          DOCKER_PID=$!

          # Wait for both processes and capture exit codes
          wait $YAML_PID
          YAML_EXIT=$?

          wait $DOCKER_PID
          DOCKER_EXIT=$?

          # Filter Docker Compose output to remove environment variable warnings but keep real errors
          if [ $DOCKER_EXIT -eq 0 ]; then
            # If Docker Compose succeeded, just copy the output
            cp "$DOCKER_OUTPUT" "$DOCKER_FILTERED"
          else
            # If Docker Compose failed, filter out common environment variable warnings but keep errors
            grep -v "WARNING.*interpolat" "$DOCKER_OUTPUT" | \
            grep -v "WARNING.*environment variable" | \
            grep -v "WARNING.*not set" > "$DOCKER_FILTERED" || cp "$DOCKER_OUTPUT" "$DOCKER_FILTERED"
          fi

          # Cleanup temporary env file
          rm -f "$TEMP_ENV"

          echo ""
          echo "📋 VALIDATION RESULTS SUMMARY"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          # Report YAML linting results with enhanced formatting
          echo ""
          echo "📝 YAML LINTING (yamllint)"
          echo "───────────────────────────────────────────────────────────────────────────────────"
          if [ $YAML_EXIT -eq 0 ]; then
            echo "✅ PASSED - YAML syntax and formatting is valid"
          else
            echo "❌ FAILED - YAML linting detected issues in ./${{ matrix.stack }}/compose.yaml:"
            echo ""
            echo "🔍 Issues found:"
            cat "$YAML_OUTPUT" | sed 's/^/    /' | sed 's|\.\/||g'
            echo ""
            echo "🛠️  Fix locally with:"
            echo "    yamllint --strict --config-file .yamllint ${{ matrix.stack }}/compose.yaml"
          fi

          echo ""

          # Report Docker Compose validation results
          echo "🐳 DOCKER COMPOSE VALIDATION (docker compose config)"
          echo "───────────────────────────────────────────────────────────────────────────────────"
          if [ $DOCKER_EXIT -eq 0 ]; then
            echo "✅ PASSED - Docker Compose configuration is valid"
          else
            echo "❌ FAILED - Docker Compose validation detected issues in ./${{ matrix.stack }}/compose.yaml:"
            echo ""
            echo "🔍 Issues found:"
            # Use filtered output to show relevant errors
            if [ -s "$DOCKER_FILTERED" ]; then
              cat "$DOCKER_FILTERED" | sed 's/^/    /'
            else
              echo "    Configuration errors detected (see full output above)"
            fi
            echo ""
            echo "🛠️  Fix locally with:"
            echo "    docker compose -f ${{ matrix.stack }}/compose.yaml config"
          fi

          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          # Final status summary
          if [ $YAML_EXIT -eq 0 ] && [ $DOCKER_EXIT -eq 0 ]; then
            echo "🎉 OVERALL STATUS: ALL VALIDATION CHECKS PASSED"
            echo "   Stack '${{ matrix.stack }}' is ready for deployment"
          else
            echo "💥 OVERALL STATUS: VALIDATION FAILED"
            echo "   Stack '${{ matrix.stack }}' has configuration issues that must be resolved"
            echo ""
            echo "   Failed checks:"
            [ $YAML_EXIT -ne 0 ] && echo "   • YAML linting (yamllint)"
            [ $DOCKER_EXIT -ne 0 ] && echo "   • Docker Compose validation (docker compose config)"
          fi

          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          # Cleanup temporary files
          rm -f "$YAML_OUTPUT" "$DOCKER_OUTPUT" "$DOCKER_FILTERED"

          # Exit with error if any linting failed
          if [ $YAML_EXIT -ne 0 ] || [ $DOCKER_EXIT -ne 0 ]; then
            exit 1
          fi

      - name: Report lint status
        if: always()
        run: |
          echo "📊 Final Status for Stack: ${{ matrix.stack }}"
          echo ""
          if [[ "${{ job.status }}" == "success" ]]; then
            echo "🎉 STACK VALIDATION: PASSED"
            echo "   Stack '${{ matrix.stack }}' passed all validation checks"
            echo "   ✅ YAML linting (yamllint)"
            echo "   ✅ Docker Compose validation (docker compose config)"
          else
            echo "💥 STACK VALIDATION: FAILED"
            echo "   Stack '${{ matrix.stack }}' has validation issues"
            echo "   See detailed error output above for resolution steps"
          fi


  lint-summary:
    name: Lint Summary
    runs-on: ubuntu-24.04
    needs: [scanning, lint]
    if: always()
    timeout-minutes: 5
    steps:
      - name: Checkout target repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          repository: ${{ inputs.target-repository }}
          ref: ${{ inputs.target-ref }}

      - name: 📊 Generate detailed summary with error reproduction
        run: |
          # Function to create temporary environment file with placeholder values
          create_temp_env() {
            local compose_file="$1"
            local temp_env_file="$2"

            # Extract environment variable references from compose file and create realistic placeholders
            grep -oE '\$\{[^}]+\}' "$compose_file" | sort -u | sed 's/\${//' | sed 's/}//' | while read var; do
              # Use realistic placeholder values based on common variable patterns
              case "$var" in
                *PATH*|*DIR*)
                  echo "${var}=/tmp/placeholder" >> "$temp_env_file"
                  ;;
                *DOMAIN*)
                  echo "${var}=example.com" >> "$temp_env_file"
                  ;;
                *PORT*)
                  echo "${var}=8080" >> "$temp_env_file"
                  ;;
                *KEY*|*SECRET*|*TOKEN*|*PASS*)
                  echo "${var}=placeholder-secret-value" >> "$temp_env_file"
                  ;;
                *URL*|*HOST*)
                  echo "${var}=http://localhost:8080" >> "$temp_env_file"
                  ;;
                UID|PUID)
                  echo "${var}=1000" >> "$temp_env_file"
                  ;;
                GID|PGID)
                  echo "${var}=1000" >> "$temp_env_file"
                  ;;
                TZ)
                  echo "${var}=UTC" >> "$temp_env_file"
                  ;;
                *)
                  echo "${var}=placeholder_value" >> "$temp_env_file"
                  ;;
              esac
            done 2>/dev/null || true
          }

          echo "📊 Final Validation Summary"
          echo ""
          echo "🔍 COMPREHENSIVE VALIDATION RESULTS"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo ""

          # GitGuardian Scanning Results
          echo "🔒 GITGUARDIAN SECURITY SCANNING"
          echo "───────────────────────────────────────────────────────────────────────────────────"
          case "${{ needs.scanning.result }}" in
            "success")
              echo "✅ PASSED - No secrets detected in code changes"
              SCANNING_OK=true
              ;;
            "skipped")
              echo "⏭️  SKIPPED - Security scanning only runs on push events"
              SCANNING_OK=true
              ;;
            "failure")
              echo "❌ FAILED - Security issues detected (secrets or policy violations)"
              SCANNING_OK=false
              ;;
            *)
              echo "❓ UNKNOWN - Unexpected scanning result: ${{ needs.scanning.result }}"
              SCANNING_OK=false
              ;;
          esac

          echo ""

          # Detailed Lint Results with Error Reproduction
          echo "📋 CODE QUALITY VALIDATION - DETAILED RESULTS"
          echo "───────────────────────────────────────────────────────────────────────────────────"

          # Parse stacks from input
          STACKS='${{ inputs.stacks }}'
          echo "📁 Analyzing stacks: $(echo "$STACKS" | jq -r 'join(", ")')"
          echo ""

          LINT_OK=true

          # Process each stack and reproduce errors if validation failed
          echo "$STACKS" | jq -r '.[]' | while read -r stack; do
            echo "🔍 Checking stack: $stack"
            echo "📄 File: ./$stack/compose.yaml"

            # Check if stack file exists
            if [[ ! -f "./$stack/compose.yaml" ]]; then
              echo "❌ ERROR: Stack file ./$stack/compose.yaml not found"
              continue
            fi

            STACK_FAILED=false

            # Run YAML validation
            echo ""
            echo "   📝 YAML Linting (yamllint):"
            if yamllint --strict --config-file .yamllint "./$stack/compose.yaml" 2>/dev/null; then
              echo "   ✅ PASSED - YAML validation successful"
            else
              echo "   ❌ FAILED - YAML validation detected issues:"
              echo ""
              yamllint --strict --config-file .yamllint "./$stack/compose.yaml" 2>&1 | sed 's/^/      /' | sed 's|\.\/||g'
              echo ""
              echo "   🛠️  Fix locally: yamllint --strict --config-file .yamllint $stack/compose.yaml"
              STACK_FAILED=true
            fi

            echo ""
            echo "   🐳 Docker Compose Validation:"

            # Create temporary .env with placeholders to suppress environment variable warnings
            TEMP_ENV=$(mktemp)
            create_temp_env "./$stack/compose.yaml" "$TEMP_ENV"

            if docker compose --env-file "$TEMP_ENV" -f "./$stack/compose.yaml" config >/dev/null 2>&1; then
              echo "   ✅ PASSED - Docker Compose validation successful"
            else
              echo "   ❌ FAILED - Docker Compose validation detected issues:"
              echo ""
              # Show filtered errors (remove environment variable warnings)
              DOCKER_ERRORS=$(docker compose --env-file "$TEMP_ENV" -f "./$stack/compose.yaml" config 2>&1 | \
                grep -v "WARNING.*interpolat" | \
                grep -v "WARNING.*environment variable" | \
                grep -v "WARNING.*not set" || echo "Configuration errors detected")

              if [[ -n "$DOCKER_ERRORS" && "$DOCKER_ERRORS" != "Configuration errors detected" ]]; then
                echo "$DOCKER_ERRORS" | sed 's/^/      /'
              else
                echo "      Configuration syntax or structure issues detected"
              fi
              echo ""
              echo "   🛠️  Fix locally: docker compose -f $stack/compose.yaml config"
              STACK_FAILED=true
            fi

            rm -f "$TEMP_ENV"

            if [[ "$STACK_FAILED" == "true" ]]; then
              echo "   🚨 Stack $stack has validation failures"
            else
              echo "   ✅ Stack $stack passed all validations"
            fi

            echo ""
            echo "───────────────────────────────────────────────────────────────────────────────────"
          done

          echo ""

          # Overall Results Summary
          if [[ "${{ needs.lint.result }}" == "success" ]]; then
            echo "✅ ALL STACKS PASSED - YAML and Docker Compose validations successful"
            LINT_OK=true
          else
            echo "❌ VALIDATION FAILURES DETECTED"
            echo ""
            echo "🚨 Failed Stacks Summary:"
            # Re-check for any failures to show summary
            echo "$STACKS" | jq -r '.[]' | while read -r stack; do
              FAILED_CHECKS=()

              if ! yamllint --strict --config-file .yamllint "./$stack/compose.yaml" >/dev/null 2>&1; then
                FAILED_CHECKS+=("YAML linting")
              fi

              TEMP_ENV=$(mktemp)
              create_temp_env "./$stack/compose.yaml" "$TEMP_ENV"

              if ! docker compose --env-file "$TEMP_ENV" -f "./$stack/compose.yaml" config >/dev/null 2>&1; then
                FAILED_CHECKS+=("Docker Compose validation")
              fi
              rm -f "$TEMP_ENV"

              if [[ ${#FAILED_CHECKS[@]} -gt 0 ]]; then
                echo "   • $stack - $(IFS=', '; echo "${FAILED_CHECKS[*]}")"
              fi
            done
            LINT_OK=false
          fi

          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          # Final determination
          if [[ "$SCANNING_OK" == "true" && "$LINT_OK" == "true" ]]; then
            echo "🎉 FINAL STATUS: ALL VALIDATION CHECKS PASSED"
            echo "   Repository is ready for deployment"
            exit 0
          else
            echo "💥 FINAL STATUS: VALIDATION FAILED"
            echo "   Issues must be resolved before deployment"
            echo ""
            echo "   Failed components:"
            [[ "$SCANNING_OK" != "true" ]] && echo "   • GitGuardian security scanning"
            [[ "$LINT_OK" != "true" ]] && echo "   • Code quality validation (see detailed errors above)"
            echo ""
            exit 1
          fi

  notify:
    name: Discord Notification
    runs-on: ubuntu-24.04
    needs: [scanning, lint, lint-summary]
    if: always()
    steps:
      - name: Configure 1Password Service Account
        uses: 1password/load-secrets-action/configure@13f58eec611f8e5db52ec16247f58c508398f3e6  # v3.0.0
        with:
          service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: Load Discord webhook and user ID
        id: op-load-discord
        uses: 1password/load-secrets-action@13f58eec611f8e5db52ec16247f58c508398f3e6  # v3.0.0
        with:
          unset-previous: true
        env:
          DISCORD_WEBHOOK: ${{ inputs.webhook-url }}
          DISCORD_USER_ID: ${{ inputs.discord-user-id != '' && inputs.discord-user-id || 'SKIP' }}

      - name: Send Discord notification
        uses: sarisia/actions-status-discord@11a0bfe3b50977e38aa2bd4a4ebd296415e83c19  # v1.15.4
        if: ${{ needs.lint-summary.result == 'failure' || (needs.lint-summary.result == 'success' && github.event_name != 'pull_request') }}
        with:
          webhook: ${{ steps.op-load-discord.outputs.DISCORD_WEBHOOK }}
          status: ${{ needs.lint-summary.result == 'success' && 'success' || 'failure' }}
          title: "🔍 ${{ inputs.repo-name }} • ${{ needs.lint-summary.result == 'success' && 'Validation Passed' || 'Validation Failed' }}"
          description: |
            ${{ needs.lint-summary.result == 'failure' && inputs.discord-user-id != '' && steps.op-load-discord.outputs.DISCORD_USER_ID != 'SKIP' && format('<@{0}> ', steps.op-load-discord.outputs.DISCORD_USER_ID) || '' }}${{ needs.lint-summary.result == 'success' && '✅ **All validation checks passed**' || '❌ **Validation issues detected**' }}

            **🔒 Security Scan:** ${{ needs.scanning.result == 'success' && '✅ No secrets detected' || needs.scanning.result == 'skipped' && '⏭️ Skipped (PR/manual)' || '❌ Issues found' }}
            **📋 Code Quality:** ${{ needs.lint.result == 'success' && '✅ All stacks valid' || '❌ Issues detected' }}

            **📂 Validated Stacks:** `${{ join(fromJson(inputs.stacks), '`, `') }}`

            ${{ github.event_name == 'pull_request' && '🔀 **Pull Request Validation**' || github.event_name == 'workflow_dispatch' && '🔧 **Manual Validation**' || format('📝 **Push to `{0}`**', github.ref_name) }}

            ${{ needs.lint.result == 'failure' && '
            **🚨 Action Required:**
            • Review stack validation errors in workflow logs
            • Fix YAML formatting and Docker Compose syntax
            • Test locally: `yamllint --strict stack/compose.yaml`
            • Check the **Lint Summary** job for detailed errors' || '' }}

            ${{ needs.scanning.result == 'failure' && '
            **🛡️ Security Alert:**
            • GitGuardian detected potential secrets
            • Review the **Security Scanning** job for details
            • Remove exposed secrets before proceeding
            • **This blocks deployment until resolved**' || '' }}

            ${{ needs.lint-summary.result == 'success' && '🚀 **Ready for deployment**' || '⚠️ **Deployment blocked until issues resolved**' }}
          color: ${{ needs.lint-summary.result == 'success' && 0x28a745 || needs.scanning.result == 'failure' && 0xdc3545 || 0xfd7e14 }}
          username: "Compose Lint"
          avatar_url: "https://cdn-icons-png.flaticon.com/512/2103/2103633.png"

      - name: Unload Discord webhook
        uses: 1password/load-secrets-action@13f58eec611f8e5db52ec16247f58c508398f3e6  # v3.0.0
        with:
          unset-previous: true
